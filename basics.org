* Naming ideas
  - Clojure CMS (CCMS)
  - A Clojure CMS for Engineers (ACCE)
  - A CMS for Engineers (ACE)
  - ENCASE  ENgineering Content mAnagement SystEms
  - ELEMENTS  Engineers beLoved contEnt ManagemENT Systems
  - ECsTASY  Engineering ConTent mAnagement SYstems
  - FLaTMATE  FunctionaL conTent MAnagemenT Engineers
  - COMAS  COntent MAnagement Services
  - COMMONS  COntent ManageMeNt On Steroids
  - COWS  COntent Workflow Systems
  - COWFiSh  COntent WorkFlow servIces
  - CONTEMPT  CONTEnt Management PlaTform
  - COMP  COntent Management Platform
  - COMPO  COntent Management PlatfOrm
  - Clotent - Clojure-based content management


* Vision / Mission
We want a modern, elegantly simple content management
system/platform - built using Clojure and FP principles.

Clotent's high-level goals:
1. Unified content data model: "It's all content."
   - From the user-perspective/UX, there's *one party* (person,
     organization, or brand) behind an app or website, with *many
     digital touchpoints*
   - e.g. in the user's mind, a domain's homepage and emails from it
     are all just the creator-party's content.
   - So Clotent's data model should support a unified view of those
     touchpoints - conceptually matching the UX.  e.g. if a user
     visits a webpage, signs up for email freebie, reads the email,
     clicks on site link, reads the new page, leaves a comment -
     *these are all actions/events on Clotent entities*.
   - content-atoms: irreducible units of text and binary data.
   - We want to avoid the usual content silos of webpage-copy, email,
     images, wiki, comments, forums, etc.
   - So all of Clotent's content-atoms/entities should share: key
     content metadata (e.g. URI), and polymorphic operators.
2. Content relations matter: "It's all connected."
   - Every content-atom is related/connected to another, in some way.
   - Relations can be explicit, e.g. hyperlink, or content-atom Y is a
     comment on content-atom X
   - Or relations can be implicit, e.g. content-atom Y is preceded by
     X, and followed by Y.  Or content-atom A is the title/parent of
     X, Y and Z.
   - Relations can be added automatically over time, e.g. by analyzing
     user interaction trails/events, or ML recommendation engines, or
     from content-analysis/similarity-scores, etc.
3. Evolving composition: "New evolves from the old."
   - Git-like versioning of "content atoms" supports the reality of
     re-writing and revision, as well as newer statistical content
     revisions/evolution like A/B testing.
4. Device/delivery-agnostic: "Write once, publish anywhere."
   - The same content should be easily reformatted/re-purposed for
     desktop, mobile, email, apps, etc.
5. Non-monolithic architecture: "CMS-as-API, CMS-as-library."
   - Your code should call the CMS, not the other way around.  Avoid
     the usual approach of CMS as monolithic architecture/framework,
     that you must adapt to and work-around.

  
* Licensing
  - Free software
  - Copyleft
  - AGPL


* Principles
  - Immutability by default, Mutability explicit and isolated
  - Persistent data
  - Decoupling
  - Fault tolerant
  - Batteries included, but can be removed


* Architecture
** Services
*** Authentication
*** Authorization
*** Content Storage
*** Content Editing
*** Content Querying
*** Content Caching
*** Content Frontend
**** web and/or mobile example
*** Service Monitoring
*** Continuous integration and deployment
** Technologies to consider
   - Clojure, JVM
   - Clojurescript for Frontends
   - Docker
     - Docker swarm
     - Docker compose
     - Docker machine
   - Datomic
   - Microservices
   - REST (incl. discoverability)
   - Swagger
   - AWS
   - Redis
   - Datascript
   - Linked Data formats
   - JSON Schema

#  LocalWords:  Clotent Clotent's
